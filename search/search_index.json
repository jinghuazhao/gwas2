{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"gwas2 gwas2 utitlties to faciliate gwas2.ado , gwas2.batch and gwas2.hlp which rely on snptest_v2.5.4-beta3 . The driver program is setup.sh , which calls bgi.sql , bgi.R and bgi.py . Data and meta-data Data Chromosome files: chr{1..23}.bgen/.bgen.bgi , where .bgi is index file created using command such as bgenix -g chr9.bgen -index . As the genotype data requires indels recoded in I/D format to save memory use by Stata, these utilities work on .bgi file instead. On execution, chr{1.23}.bgen.csv are generated which contains the SNP information in text format. Note however, the driver program for INTERVAL study does not include chromosome X. Meta-data There are four eseential files: sample_info.dta.gz (idorder is the samples order in BGEN file) id idorder missing OMICF10026 1 0 OMICF10064 2 0 ... SNPinfo.dta.gz (type: 0=imputed; 2=genotyped and in reference panel as well; 3=genotyped and not in ref panel) chr rsid info type 1 rs367896724 .742969 0 1 rs555500075 .727742 0 ... studyname.sample (SNPTEST sample file, e.g., Fenland-OMICS; change studyname to your own) ID_1 ID_2 missing 0 0 0 OMICF10026 OMICF10026 0 OMICF10064 OMICF10064 0 ... Chunks_15.dta (file list the BP boundaries of chunks in each chromosome. 15 chunks per chromosome, and try to make same number of markers in each chunk in a chromosome) CHR Sub P0 P1 1 1 10177 14405380 1 2 14405461 28708996 1 3 28709005 44198392 ... 1 15 235984335 249240543 2 1 10180 14003357 2 2 14003460 30090194 2 3 30090341 43676939 ... 2 15 229415780 243188367 3 1 60162 10466985","title":"Home"},{"location":"#gwas2","text":"gwas2 utitlties to faciliate gwas2.ado , gwas2.batch and gwas2.hlp which rely on snptest_v2.5.4-beta3 . The driver program is setup.sh , which calls bgi.sql , bgi.R and bgi.py .","title":"gwas2"},{"location":"#data-and-meta-data","text":"","title":"Data and meta-data"},{"location":"#data","text":"Chromosome files: chr{1..23}.bgen/.bgen.bgi , where .bgi is index file created using command such as bgenix -g chr9.bgen -index . As the genotype data requires indels recoded in I/D format to save memory use by Stata, these utilities work on .bgi file instead. On execution, chr{1.23}.bgen.csv are generated which contains the SNP information in text format. Note however, the driver program for INTERVAL study does not include chromosome X.","title":"Data"},{"location":"#meta-data","text":"There are four eseential files: sample_info.dta.gz (idorder is the samples order in BGEN file) id idorder missing OMICF10026 1 0 OMICF10064 2 0 ... SNPinfo.dta.gz (type: 0=imputed; 2=genotyped and in reference panel as well; 3=genotyped and not in ref panel) chr rsid info type 1 rs367896724 .742969 0 1 rs555500075 .727742 0 ... studyname.sample (SNPTEST sample file, e.g., Fenland-OMICS; change studyname to your own) ID_1 ID_2 missing 0 0 0 OMICF10026 OMICF10026 0 OMICF10064 OMICF10064 0 ... Chunks_15.dta (file list the BP boundaries of chunks in each chromosome. 15 chunks per chromosome, and try to make same number of markers in each chunk in a chromosome) CHR Sub P0 P1 1 1 10177 14405380 1 2 14405461 28708996 1 3 28709005 44198392 ... 1 15 235984335 249240543 2 1 10180 14003357 2 2 14003460 30090194 2 3 30090341 43676939 ... 2 15 229415780 243188367 3 1 60162 10466985","title":"Meta-data"},{"location":"Caprion/","text":"Caprion example The working directory as with variables is predefined for pilot project on Caprion platform, and we use the appropriate setup for the INTERVAL study. export TMPDIR=${HPC_WORK}/work export dir=~/rda/projects/Caprion_proteomics export caprion=${dir}/pilot . /etc/profile.d/modules.sh module load ceuadmin/stata export full=(RCN3_442625488_VADQDGDSMATR RCN3_442666668_EVAKEFDQLTPEESQAR RCN3_All RCN3_DR) export abbrev=(RCN3_44262548~R RCN3_44266666~R RCN3_All RCN3_DR) for i in {0..3} do export y=${full[$i]} export trait=${abbrev[$i]} if [ ! -d ${caprion}/${y} ]; then mkdir ${caprion}/${y}; fi echo ${y} -- ${trait} stata-mp -b do ${caprion}/utils/gwas2.do done for i in {0..3} do export y=${full[$i]} export trait=${abbrev[$i]} echo ${y} -- ${trait} head -1 ${caprion}/${y}/interval.*.All.txt grep -w rs113886122 ${caprion}/${y}/interval.*.All.txt done # _invn export abbrev=(RCN3_44262548~n RCN3_44266666~R RCN3_All_invn RCN3_DR_invn) for i in {0..3} do export y=${full[$i]}_invn export trait=${abbrev[$i]} if [ ! -d ${caprion}/${y} ]; then mkdir ${caprion}/${y}; fi echo ${y} -- ${trait} stata-mp -b do ${caprion}/utils/gwas2_invn.do done Note that long names will be abbreviated by Stata, whose algorithm does not always produce unique names. local dir : env HPC_WORK local caprion : env caprion local y : env y local trait : env trait set maxvar 21000 insheet using \"`caprion'/data2/phase2.dat\", delim(\" \") case clear // To fix the glitch of SNPTEST on covariates foreach x of varlist PC1-PC20 { replace `x'=`x'*10000 } rename ID_1 id format id %15.0g merge 1:1 id using \"`dir'/data/interval/interval_data\" gwas2 `trait', studyname(interval) dirgenefiles(\"`caprion'/data2\") chr(19) /* */ covariates(agePulse bmi PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 PC10 PC11 PC12 PC13 PC14 PC15 PC16 PC17 PC18 PC19 PC20) /* */ class(sexPulse ethnicity classification) dirwork(\"`caprion'/`y'\") outfmt(txt) Our model is [y \\sim age + bmi + sex + ethnicity + classification + PC1 + \\ldots PC20 + genotype] Strangely as before, we need to scale up the principal components (PCs) in order for the model to converge.","title":"Example"},{"location":"Caprion/#caprion-example","text":"The working directory as with variables is predefined for pilot project on Caprion platform, and we use the appropriate setup for the INTERVAL study. export TMPDIR=${HPC_WORK}/work export dir=~/rda/projects/Caprion_proteomics export caprion=${dir}/pilot . /etc/profile.d/modules.sh module load ceuadmin/stata export full=(RCN3_442625488_VADQDGDSMATR RCN3_442666668_EVAKEFDQLTPEESQAR RCN3_All RCN3_DR) export abbrev=(RCN3_44262548~R RCN3_44266666~R RCN3_All RCN3_DR) for i in {0..3} do export y=${full[$i]} export trait=${abbrev[$i]} if [ ! -d ${caprion}/${y} ]; then mkdir ${caprion}/${y}; fi echo ${y} -- ${trait} stata-mp -b do ${caprion}/utils/gwas2.do done for i in {0..3} do export y=${full[$i]} export trait=${abbrev[$i]} echo ${y} -- ${trait} head -1 ${caprion}/${y}/interval.*.All.txt grep -w rs113886122 ${caprion}/${y}/interval.*.All.txt done # _invn export abbrev=(RCN3_44262548~n RCN3_44266666~R RCN3_All_invn RCN3_DR_invn) for i in {0..3} do export y=${full[$i]}_invn export trait=${abbrev[$i]} if [ ! -d ${caprion}/${y} ]; then mkdir ${caprion}/${y}; fi echo ${y} -- ${trait} stata-mp -b do ${caprion}/utils/gwas2_invn.do done Note that long names will be abbreviated by Stata, whose algorithm does not always produce unique names. local dir : env HPC_WORK local caprion : env caprion local y : env y local trait : env trait set maxvar 21000 insheet using \"`caprion'/data2/phase2.dat\", delim(\" \") case clear // To fix the glitch of SNPTEST on covariates foreach x of varlist PC1-PC20 { replace `x'=`x'*10000 } rename ID_1 id format id %15.0g merge 1:1 id using \"`dir'/data/interval/interval_data\" gwas2 `trait', studyname(interval) dirgenefiles(\"`caprion'/data2\") chr(19) /* */ covariates(agePulse bmi PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 PC9 PC10 PC11 PC12 PC13 PC14 PC15 PC16 PC17 PC18 PC19 PC20) /* */ class(sexPulse ethnicity classification) dirwork(\"`caprion'/`y'\") outfmt(txt) Our model is [y \\sim age + bmi + sex + ethnicity + classification + PC1 + \\ldots PC20 + genotype] Strangely as before, we need to scale up the principal components (PCs) in order for the model to converge.","title":"Caprion example"}]}